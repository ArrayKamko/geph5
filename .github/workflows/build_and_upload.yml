name: Build and Upload

on: [push]

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-musl
            dir: musl
          - os: ubuntu-20.04
            target: aarch64-unknown-linux-musl
            dir: musl-arm64
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            dir: gnu
          - os: macos-latest
            target: x86_64-apple-darwin
            dir: macos

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install cross (ARM64 only)
        if: matrix.target == 'aarch64-unknown-linux-musl'
        run: cargo install cross

      - name: Install musl-tools (non-ARM64 Linux)
        if: ${{ matrix.target != 'aarch64-unknown-linux-musl' && matrix.dir == 'musl' }}
        run: sudo apt-get install -y musl-tools

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Build (using cross for ARM64)
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-musl" ]; then
            cross build --release --target ${{ matrix.target }};
          else
            cargo build --locked --release --target ${{ matrix.target }};
          fi

      - name: Move binaries to artifacts directory
        shell: bash
        run: |
          mkdir -p artifacts/${{ matrix.dir }}
          mv target/${{ matrix.target }}/release/* artifacts/${{ matrix.dir }}/

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.dir }}-latest
          path: artifacts/${{ matrix.dir }}

  upload:
    if: github.ref == 'refs/heads/master'
    needs: build
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - dir: gnu
          - dir: musl
          - dir: musl-arm64
          - dir: macos

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Set up AWS configuration
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region apac
          aws configure set output json

      - name: Upload to Cloudflare R2
        run: |
          aws s3 cp ./artifacts/${{ matrix.dir }}-latest s3://geph5/${{ matrix.dir }}-latest --recursive --endpoint-url=https://b5e397a549f0e6543dba8e1d83ca9924.r2.cloudflarestorage.com
